{"remainingRequest":"/home/deadstep/Desktop/Main/Portfolio/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/deadstep/Desktop/Main/Portfolio/client/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/deadstep/Desktop/Main/Portfolio/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/deadstep/Desktop/Main/Portfolio/client/src/components/Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"/home/deadstep/Desktop/Main/Portfolio/client/src/components/Home.vue","mtime":1644762155943},{"path":"/home/deadstep/Desktop/Main/Portfolio/client/node_modules/cache-loader/dist/cjs.js","mtime":1643457246581},{"path":"/home/deadstep/Desktop/Main/Portfolio/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1643457247369},{"path":"/home/deadstep/Desktop/Main/Portfolio/client/node_modules/cache-loader/dist/cjs.js","mtime":1643457246581},{"path":"/home/deadstep/Desktop/Main/Portfolio/client/node_modules/vue-loader/lib/index.js","mtime":1643457247181}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}